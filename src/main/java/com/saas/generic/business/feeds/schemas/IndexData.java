/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.saas.generic.business.feeds.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Index data schema to help you understand it's market value. */
@org.apache.avro.specific.AvroGenerated
public class IndexData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6597459565594916753L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IndexData\",\"namespace\":\"com.saas.generic.business.feeds.schemas\",\"doc\":\"Index data schema to help you understand it's market value.\",\"fields\":[{\"name\":\"index\",\"type\":\"string\",\"doc\":\"Index\"},{\"name\":\"date\",\"type\":\"string\",\"doc\":\"Index Date\"},{\"name\":\"open\",\"type\":\"string\",\"doc\":\"Index Open Value\"},{\"name\":\"high\",\"type\":\"string\",\"doc\":\"Index high value\"},{\"name\":\"low\",\"type\":\"string\",\"doc\":\"Index low value\"},{\"name\":\"close\",\"type\":\"string\",\"doc\":\"Index closing value\"},{\"name\":\"adjClose\",\"type\":\"string\",\"doc\":\"Index adjClose value\"},{\"name\":\"volume\",\"type\":\"string\",\"doc\":\"Index volume\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<IndexData> ENCODER =
      new BinaryMessageEncoder<IndexData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IndexData> DECODER =
      new BinaryMessageDecoder<IndexData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<IndexData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<IndexData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<IndexData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this IndexData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a IndexData from a ByteBuffer. */
  public static IndexData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Index */
  @Deprecated public CharSequence index;
  /** Index Date */
  @Deprecated public CharSequence date;
  /** Index Open Value */
  @Deprecated public CharSequence open;
  /** Index high value */
  @Deprecated public CharSequence high;
  /** Index low value */
  @Deprecated public CharSequence low;
  /** Index closing value */
  @Deprecated public CharSequence close;
  /** Index adjClose value */
  @Deprecated public CharSequence adjClose;
  /** Index volume */
  @Deprecated public CharSequence volume;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IndexData() {}

  /**
   * All-args constructor.
   * @param index Index
   * @param date Index Date
   * @param open Index Open Value
   * @param high Index high value
   * @param low Index low value
   * @param close Index closing value
   * @param adjClose Index adjClose value
   * @param volume Index volume
   */
  public IndexData(CharSequence index, CharSequence date, CharSequence open, CharSequence high, CharSequence low, CharSequence close, CharSequence adjClose, CharSequence volume) {
    this.index = index;
    this.date = date;
    this.open = open;
    this.high = high;
    this.low = low;
    this.close = close;
    this.adjClose = adjClose;
    this.volume = volume;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return index;
    case 1: return date;
    case 2: return open;
    case 3: return high;
    case 4: return low;
    case 5: return close;
    case 6: return adjClose;
    case 7: return volume;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: index = (CharSequence)value$; break;
    case 1: date = (CharSequence)value$; break;
    case 2: open = (CharSequence)value$; break;
    case 3: high = (CharSequence)value$; break;
    case 4: low = (CharSequence)value$; break;
    case 5: close = (CharSequence)value$; break;
    case 6: adjClose = (CharSequence)value$; break;
    case 7: volume = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'index' field.
   * @return Index
   */
  public CharSequence getIndex() {
    return index;
  }

  /**
   * Sets the value of the 'index' field.
   * Index
   * @param value the value to set.
   */
  public void setIndex(CharSequence value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return Index Date
   */
  public CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * Index Date
   * @param value the value to set.
   */
  public void setDate(CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'open' field.
   * @return Index Open Value
   */
  public CharSequence getOpen() {
    return open;
  }

  /**
   * Sets the value of the 'open' field.
   * Index Open Value
   * @param value the value to set.
   */
  public void setOpen(CharSequence value) {
    this.open = value;
  }

  /**
   * Gets the value of the 'high' field.
   * @return Index high value
   */
  public CharSequence getHigh() {
    return high;
  }

  /**
   * Sets the value of the 'high' field.
   * Index high value
   * @param value the value to set.
   */
  public void setHigh(CharSequence value) {
    this.high = value;
  }

  /**
   * Gets the value of the 'low' field.
   * @return Index low value
   */
  public CharSequence getLow() {
    return low;
  }

  /**
   * Sets the value of the 'low' field.
   * Index low value
   * @param value the value to set.
   */
  public void setLow(CharSequence value) {
    this.low = value;
  }

  /**
   * Gets the value of the 'close' field.
   * @return Index closing value
   */
  public CharSequence getClose() {
    return close;
  }

  /**
   * Sets the value of the 'close' field.
   * Index closing value
   * @param value the value to set.
   */
  public void setClose(CharSequence value) {
    this.close = value;
  }

  /**
   * Gets the value of the 'adjClose' field.
   * @return Index adjClose value
   */
  public CharSequence getAdjClose() {
    return adjClose;
  }

  /**
   * Sets the value of the 'adjClose' field.
   * Index adjClose value
   * @param value the value to set.
   */
  public void setAdjClose(CharSequence value) {
    this.adjClose = value;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return Index volume
   */
  public CharSequence getVolume() {
    return volume;
  }

  /**
   * Sets the value of the 'volume' field.
   * Index volume
   * @param value the value to set.
   */
  public void setVolume(CharSequence value) {
    this.volume = value;
  }

  /**
   * Creates a new IndexData RecordBuilder.
   * @return A new IndexData RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new IndexData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IndexData RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new IndexData RecordBuilder by copying an existing IndexData instance.
   * @param other The existing instance to copy.
   * @return A new IndexData RecordBuilder
   */
  public static Builder newBuilder(IndexData other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for IndexData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IndexData>
    implements org.apache.avro.data.RecordBuilder<IndexData> {

    /** Index */
    private CharSequence index;
    /** Index Date */
    private CharSequence date;
    /** Index Open Value */
    private CharSequence open;
    /** Index high value */
    private CharSequence high;
    /** Index low value */
    private CharSequence low;
    /** Index closing value */
    private CharSequence close;
    /** Index adjClose value */
    private CharSequence adjClose;
    /** Index volume */
    private CharSequence volume;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.open)) {
        this.open = data().deepCopy(fields()[2].schema(), other.open);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.high)) {
        this.high = data().deepCopy(fields()[3].schema(), other.high);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.low)) {
        this.low = data().deepCopy(fields()[4].schema(), other.low);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.close)) {
        this.close = data().deepCopy(fields()[5].schema(), other.close);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.adjClose)) {
        this.adjClose = data().deepCopy(fields()[6].schema(), other.adjClose);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.volume)) {
        this.volume = data().deepCopy(fields()[7].schema(), other.volume);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing IndexData instance
     * @param other The existing instance to copy.
     */
    private Builder(IndexData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.open)) {
        this.open = data().deepCopy(fields()[2].schema(), other.open);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.high)) {
        this.high = data().deepCopy(fields()[3].schema(), other.high);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.low)) {
        this.low = data().deepCopy(fields()[4].schema(), other.low);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.close)) {
        this.close = data().deepCopy(fields()[5].schema(), other.close);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.adjClose)) {
        this.adjClose = data().deepCopy(fields()[6].schema(), other.adjClose);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.volume)) {
        this.volume = data().deepCopy(fields()[7].schema(), other.volume);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'index' field.
      * Index
      * @return The value.
      */
    public CharSequence getIndex() {
      return index;
    }

    /**
      * Sets the value of the 'index' field.
      * Index
      * @param value The value of 'index'.
      * @return This builder.
      */
    public Builder setIndex(CharSequence value) {
      validate(fields()[0], value);
      this.index = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'index' field has been set.
      * Index
      * @return True if the 'index' field has been set, false otherwise.
      */
    public boolean hasIndex() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'index' field.
      * Index
      * @return This builder.
      */
    public Builder clearIndex() {
      index = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * Index Date
      * @return The value.
      */
    public CharSequence getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * Index Date
      * @param value The value of 'date'.
      * @return This builder.
      */
    public Builder setDate(CharSequence value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * Index Date
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * Index Date
      * @return This builder.
      */
    public Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'open' field.
      * Index Open Value
      * @return The value.
      */
    public CharSequence getOpen() {
      return open;
    }

    /**
      * Sets the value of the 'open' field.
      * Index Open Value
      * @param value The value of 'open'.
      * @return This builder.
      */
    public Builder setOpen(CharSequence value) {
      validate(fields()[2], value);
      this.open = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'open' field has been set.
      * Index Open Value
      * @return True if the 'open' field has been set, false otherwise.
      */
    public boolean hasOpen() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'open' field.
      * Index Open Value
      * @return This builder.
      */
    public Builder clearOpen() {
      open = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'high' field.
      * Index high value
      * @return The value.
      */
    public CharSequence getHigh() {
      return high;
    }

    /**
      * Sets the value of the 'high' field.
      * Index high value
      * @param value The value of 'high'.
      * @return This builder.
      */
    public Builder setHigh(CharSequence value) {
      validate(fields()[3], value);
      this.high = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'high' field has been set.
      * Index high value
      * @return True if the 'high' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'high' field.
      * Index high value
      * @return This builder.
      */
    public Builder clearHigh() {
      high = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'low' field.
      * Index low value
      * @return The value.
      */
    public CharSequence getLow() {
      return low;
    }

    /**
      * Sets the value of the 'low' field.
      * Index low value
      * @param value The value of 'low'.
      * @return This builder.
      */
    public Builder setLow(CharSequence value) {
      validate(fields()[4], value);
      this.low = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'low' field has been set.
      * Index low value
      * @return True if the 'low' field has been set, false otherwise.
      */
    public boolean hasLow() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'low' field.
      * Index low value
      * @return This builder.
      */
    public Builder clearLow() {
      low = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'close' field.
      * Index closing value
      * @return The value.
      */
    public CharSequence getClose() {
      return close;
    }

    /**
      * Sets the value of the 'close' field.
      * Index closing value
      * @param value The value of 'close'.
      * @return This builder.
      */
    public Builder setClose(CharSequence value) {
      validate(fields()[5], value);
      this.close = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'close' field has been set.
      * Index closing value
      * @return True if the 'close' field has been set, false otherwise.
      */
    public boolean hasClose() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'close' field.
      * Index closing value
      * @return This builder.
      */
    public Builder clearClose() {
      close = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'adjClose' field.
      * Index adjClose value
      * @return The value.
      */
    public CharSequence getAdjClose() {
      return adjClose;
    }

    /**
      * Sets the value of the 'adjClose' field.
      * Index adjClose value
      * @param value The value of 'adjClose'.
      * @return This builder.
      */
    public Builder setAdjClose(CharSequence value) {
      validate(fields()[6], value);
      this.adjClose = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'adjClose' field has been set.
      * Index adjClose value
      * @return True if the 'adjClose' field has been set, false otherwise.
      */
    public boolean hasAdjClose() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'adjClose' field.
      * Index adjClose value
      * @return This builder.
      */
    public Builder clearAdjClose() {
      adjClose = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * Index volume
      * @return The value.
      */
    public CharSequence getVolume() {
      return volume;
    }

    /**
      * Sets the value of the 'volume' field.
      * Index volume
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public Builder setVolume(CharSequence value) {
      validate(fields()[7], value);
      this.volume = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * Index volume
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'volume' field.
      * Index volume
      * @return This builder.
      */
    public Builder clearVolume() {
      volume = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IndexData build() {
      try {
        IndexData record = new IndexData();
        record.index = fieldSetFlags()[0] ? this.index : (CharSequence) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (CharSequence) defaultValue(fields()[1]);
        record.open = fieldSetFlags()[2] ? this.open : (CharSequence) defaultValue(fields()[2]);
        record.high = fieldSetFlags()[3] ? this.high : (CharSequence) defaultValue(fields()[3]);
        record.low = fieldSetFlags()[4] ? this.low : (CharSequence) defaultValue(fields()[4]);
        record.close = fieldSetFlags()[5] ? this.close : (CharSequence) defaultValue(fields()[5]);
        record.adjClose = fieldSetFlags()[6] ? this.adjClose : (CharSequence) defaultValue(fields()[6]);
        record.volume = fieldSetFlags()[7] ? this.volume : (CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IndexData>
    WRITER$ = (org.apache.avro.io.DatumWriter<IndexData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IndexData>
    READER$ = (org.apache.avro.io.DatumReader<IndexData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
